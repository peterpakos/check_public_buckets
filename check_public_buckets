#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tool to check public S3 buckets

Author: Peter Pakos <peter.pakos@wandisco.com>

Copyright (C) 2017 WANdisco. All rights reserved.
"""

from __future__ import print_function
import os
import sys
import argparse
import fcntl
from logger import get_logger
import boto3
import botocore.exceptions


class Main(object):
    VERSION = '1.0.0'

    def __init__(self):
        if not self._lock_file():
            print('The script is already running, exiting...', file=sys.stderr)
            exit(1)

        self._args = self._parse_args()
        self._log = get_logger(debug=self._args.debug, quiet=self._args.quiet, verbose=self._args.verbose)
        self._log.debug('Initialising...')
        session = None

        try:
            session = boto3.Session(profile_name=self._args.profile)
        except botocore.exceptions.ProfileNotFound as e:
            self._log.critical(e)
            exit(1)

        self._s3c = session.client('s3')

    @staticmethod
    def _lock_file(lock_file='.lock'):
        file_descriptor = os.open(lock_file, os.O_CREAT | os.O_TRUNC | os.O_WRONLY)
        try:
            fcntl.lockf(file_descriptor, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            return False

        return True

    def _parse_args(self):
        parser = argparse.ArgumentParser(description='Tool to check public S3 buckets', add_help=False)
        parser.add_argument('--version', action='version',
                            version='%s %s' % (os.path.basename(sys.argv[0]), self.VERSION))
        parser.add_argument('--help', action='help', help='show this help message and exit')
        parser.add_argument('--debug', action='store_true', dest='debug', help='debugging mode')
        parser.add_argument('--verbose', action='store_true', dest='verbose', help='verbose logging mode')
        parser.add_argument('--quiet', action='store_true', dest='quiet', help="don't log to console")
        parser.add_argument('-p', '--profile', dest='profile', help='profile name (default: %(default)s)',
                            default='default')

        return parser.parse_args()

    def run(self):
        self._log.debug('Starting...')
        self._get_public_buckets()
        self._log.debug('Finishing...')

    def _get_public_buckets(self):
        public_acl_indicator = 'http://acs.amazonaws.com/groups/global/AllUsers'
        public_buckets = {}

        list_bucket_response = None
        self._log.debug('Getting bucket list')
        try:
            list_bucket_response = self._s3c.list_buckets()
        except botocore.exceptions.ClientError as e:
            self._log.critical(e)
            exit(1)
        self._log.debug('Found %s S3 buckets' % len(list_bucket_response.get('Buckets')))

        for bucket_dict in list_bucket_response.get('Buckets'):
            bucket = bucket_dict.get('Name')
            self._log.debug('Getting ACL for bucket %s' % bucket)
            bucket_acl_response = None
            try:
                bucket_acl_response = self._s3c.get_bucket_acl(Bucket=bucket)
            except botocore.exceptions.ClientError as e:
                self._log.critical(e)
                exit(1)

            for grant in bucket_acl_response.get('Grants'):
                for (k, v) in grant.items():
                    if k == 'Permission' and grant.get('Grantee').get('URI') == public_acl_indicator:
                        if bucket_dict.get('Name') not in public_buckets:
                            public_buckets[bucket] = [v]
                        else:
                            if v not in public_buckets[bucket_dict.get('Name')]:
                                public_buckets[bucket].append(v)

            if bucket in public_buckets:
                self._log.debug('Found public ACLs for bucket %s: %s' % (bucket, ', '.join(public_buckets[bucket])))

        if public_buckets:
            self._log.info('[%s] Public S3 buckets (%s/%s):' %
                           (self._args.profile, len(public_buckets), len(list_bucket_response.get('Buckets'))))
            for bucket, acl in public_buckets.items():
                self._log.info('- %s (ACL: %s)' % (bucket, ', '.join(acl)))

        return public_buckets


if __name__ == '__main__':
    try:
        Main().run()
    except KeyboardInterrupt:
        print('\nTerminating...')
        exit(130)
